{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport moment from \"moment\";\nconst useGlobalTaskUpdate = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\n  const updateTask = async updatedTask => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:3001/global-tasks/update', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      const result = await response.json();\n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateStatus = async updatedTask => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:3001/global-tasks/change-status', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n      const result = await response.json();\n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    updateTask,\n    updateStatus,\n    data,\n    error,\n    loading\n  };\n};\n_s(useGlobalTaskUpdate, \"IlRGvt1AZdcOSbnP5/Y1l30GPdE=\");\nexport default useGlobalTaskUpdate;","map":{"version":3,"names":["useState","moment","useGlobalTaskUpdate","_s","data","setData","error","setError","loading","setLoading","currentMonth","setCurrentMonth","format","updateTask","updatedTask","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","err","message","updateStatus"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/useGlobalTaskUpdate.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst useGlobalTaskUpdate = () => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\r\n\r\n  const updateTask = async (updatedTask) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/global-tasks/update', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update task');\r\n      }      \r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      return result; \r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err; \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateStatus = async (updatedTask) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/global-tasks/change-status', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update task status');\r\n      }      \r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      return result; \r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err; \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { updateTask, updateStatus, data, error, loading };\r\n};\r\n\r\nexport default useGlobalTaskUpdate;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACW,MAAM,CAAC,SAAS,CAAC,CAAC;EAE5E,MAAMC,UAAU,GAAG,MAAOC,WAAW,IAAK;IACxCL,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpCpB,OAAO,CAACmB,MAAM,CAAC;MACf,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX,CAAC,SAAS;MACRjB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMmB,YAAY,GAAG,MAAOd,WAAW,IAAK;IAC1CL,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;QAC/EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpCpB,OAAO,CAACmB,MAAM,CAAC;MACf,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX,CAAC,SAAS;MACRjB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEI,UAAU;IAAEe,YAAY;IAAExB,IAAI;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AAC3D,CAAC;AAACL,EAAA,CA/DID,mBAAmB;AAiEzB,eAAeA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}