{"ast":null,"code":"var _jsxFileName = \"D:\\\\coso codoso\\\\Scheduler 3000\\\\scheduler-3000-frontend\\\\src\\\\components\\\\month.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport useCheckMonth from \"./useCheckMonth\";\nimport Day from \"./day\";\nimport DayCard from \"./dayCard\";\nimport NewGlobalTaskForm from './newGlobalTaskForm';\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Month = () => {\n  _s();\n  const {\n    tasks,\n    loading,\n    error,\n    currentMonth,\n    setCurrentMonth,\n    checkAndCreateTasks\n  } = useCheckMonth();\n  const [showGlobalTaskForm, setShowGlobalTaskForm] = useState(false); // State to toggle form visibility  \n\n  const handleCheckTasks = async () => {\n    const [year, month] = currentMonth.split(\"-\");\n    await checkAndCreateTasks(year, month);\n  };\n  const toggleGlobalTaskForm = () => {\n    setShowGlobalTaskForm(!showGlobalTaskForm); // Toggle the form visibility\n  };\n  const daysInMonth = moment(currentMonth, \"YYYY-MM\").daysInMonth();\n  const daysArray = Array.from({\n    length: daysInMonth\n  }, (_, i) => moment(currentMonth, \"YYYY-MM\").date(i + 1).toDate());\n  const emptySpaces = (daysArray[0].getDay() + 6) % 7;\n  const mainDivStyles = {\n    border: '2px solid blue',\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  const daysDivStyles = {\n    border: '2px solid grey',\n    width: '90%',\n    display: 'flex',\n    flexWrap: 'wrap'\n  };\n  const emptyDivStyles = {\n    backgroundColor: 'lightgrey',\n    border: '2px solid grey',\n    width: 'calc(14.28571428% - 4px)',\n    aspectRatio: '1 / 1',\n    margin: '0px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: mainDivStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: moment(currentMonth, \"YYYY-MM\").format(\"MMMM YYYY\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCheckTasks,\n      children: \"Check and Create Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleGlobalTaskForm,\n      children: showGlobalTaskForm ? \"Cancelar\" : \"Nueva Tarea Global\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), showGlobalTaskForm && /*#__PURE__*/_jsxDEV(NewGlobalTaskForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: daysDivStyles,\n      children: [Array.from({\n        length: emptySpaces\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: emptyDivStyles\n      }, `empty-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)), daysArray.map(day => /*#__PURE__*/_jsxDEV(DayCard, {\n        date: day,\n        data: {\n          tasks\n        }\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Month, \"SIdYrjJybwpIIPFXM4B2nI08Uek=\", false, function () {\n  return [useCheckMonth];\n});\n_c = Month;\nexport default Month;\nvar _c;\n$RefreshReg$(_c, \"Month\");","map":{"version":3,"names":["React","useState","useCheckMonth","Day","DayCard","NewGlobalTaskForm","moment","jsxDEV","_jsxDEV","Month","_s","tasks","loading","error","currentMonth","setCurrentMonth","checkAndCreateTasks","showGlobalTaskForm","setShowGlobalTaskForm","handleCheckTasks","year","month","split","toggleGlobalTaskForm","daysInMonth","daysArray","Array","from","length","_","i","date","toDate","emptySpaces","getDay","mainDivStyles","border","display","flexWrap","alignItems","justifyContent","daysDivStyles","width","emptyDivStyles","backgroundColor","aspectRatio","margin","flexDirection","style","children","format","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","map","index","day","data","_c","$RefreshReg$"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/month.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useCheckMonth from \"./useCheckMonth\";\r\nimport Day from \"./day\";\r\nimport DayCard from \"./dayCard\";\r\nimport NewGlobalTaskForm from './newGlobalTaskForm'; \r\nimport moment from \"moment\";\r\n\r\nconst Month = () => {\r\n  const { tasks, loading, error, currentMonth, setCurrentMonth, checkAndCreateTasks } = useCheckMonth();\r\n  const [showGlobalTaskForm, setShowGlobalTaskForm] = useState(false); // State to toggle form visibility  \r\n\r\n  const handleCheckTasks = async () => {\r\n    const [year, month] = currentMonth.split(\"-\");\r\n    await checkAndCreateTasks(year, month);\r\n  };\r\n\r\n  const toggleGlobalTaskForm = () => {\r\n    setShowGlobalTaskForm(!showGlobalTaskForm); // Toggle the form visibility\r\n  };\r\n\r\n  const daysInMonth = moment(currentMonth, \"YYYY-MM\").daysInMonth();\r\n  const daysArray = Array.from({ length: daysInMonth }, (_, i) =>\r\n    moment(currentMonth, \"YYYY-MM\").date(i + 1).toDate()\r\n  );\r\n  const emptySpaces = (daysArray[0].getDay() + 6) % 7;  \r\n\r\n  const mainDivStyles = {\r\n    border: '2px solid blue',    \r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  };\r\n\r\n  const daysDivStyles = {\r\n    border: '2px solid grey',\r\n    width: '90%',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',    \r\n  };\r\n\r\n  const emptyDivStyles = {\r\n    backgroundColor: 'lightgrey',\r\n    border: '2px solid grey',\r\n    width: 'calc(14.28571428% - 4px)',\r\n    aspectRatio: '1 / 1',\r\n    margin: '0px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',      \r\n  };\r\n\r\n  return (\r\n    <div style={mainDivStyles}>\r\n      <h1>{moment(currentMonth, \"YYYY-MM\").format(\"MMMM YYYY\")}</h1>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      <button onClick={handleCheckTasks}>Check and Create Tasks</button>\r\n      \r\n      <button onClick={toggleGlobalTaskForm}>\r\n        {showGlobalTaskForm ? \"Cancelar\" : \"Nueva Tarea Global\"}\r\n      </button>\r\n\r\n      {showGlobalTaskForm && <NewGlobalTaskForm />}\r\n      <div style={daysDivStyles}>\r\n        {Array.from({ length: emptySpaces }).map((_, index) => (\r\n          <div key={`empty-${index}`} style={emptyDivStyles} />\r\n        ))}\r\n        {daysArray.map((day) => (\r\n          <DayCard key={day} date={day} data={{ tasks }} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Month;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}