{"ast":null,"code":"import{useState,useEffect}from\"react\";import moment from\"moment\";const useCheckMonth=()=>{const[tasks,setTasks]=useState([]);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const[currentMonth,setCurrentMonth]=useState(moment().format(\"YYYY-MM\"));const fetchTasks=async(year,month)=>{setLoading(true);setError(null);try{const response=await fetch(`http://localhost:3001/months?year=${year}&month=${month}`);if(!response.ok)throw new Error(\"Failed to fetch tasks\");//await checkAndCreateTasks(year, month);\nconst result=await response.json();setTasks(result.globalTaskDates||[]);}catch(err){setError(err.message);}finally{setLoading(false);}};const checkAndCreateTasks=async(year,month)=>{try{const response=await fetch(`http://localhost:3001/months/checkGlobalTasks`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({year,month})});if(!response.ok)throw new Error(\"Failed to check tasks\");//await fetchTasks(year, month);\n}catch(err){setError(err.message);}};useEffect(()=>{const[year,month]=currentMonth.split(\"-\");fetchTasks(year,month);},[currentMonth]);return{tasks,loading,error,currentMonth,setCurrentMonth,checkAndCreateTasks};};export default useCheckMonth;","map":{"version":3,"names":["useState","useEffect","moment","useCheckMonth","tasks","setTasks","error","setError","loading","setLoading","currentMonth","setCurrentMonth","format","fetchTasks","year","month","response","fetch","ok","Error","result","json","globalTaskDates","err","message","checkAndCreateTasks","method","headers","body","JSON","stringify","split"],"sources":["D:/coso codoso/Scheduler 3000/arodbol97.github.io/scheduler/src/components/useCheckMonth.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst useCheckMonth = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\r\n\r\n  const fetchTasks = async (year, month) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {      \r\n      const response = await fetch(`http://localhost:3001/months?year=${year}&month=${month}`);\r\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\");\r\n\r\n      //await checkAndCreateTasks(year, month);\r\n      const result = await response.json();\r\n      setTasks(result.globalTaskDates || []);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkAndCreateTasks = async (year, month) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/months/checkGlobalTasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ year, month }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to check tasks\");\r\n      //await fetchTasks(year, month);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const [year, month] = currentMonth.split(\"-\");    \r\n    fetchTasks(year, month);    \r\n  }, [currentMonth]);\r\n\r\n  return { tasks, loading, error, currentMonth, setCurrentMonth, checkAndCreateTasks };\r\n};\r\n\r\nexport default useCheckMonth;\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,CAAAC,MAAM,KAAM,QAAQ,CAE3B,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGL,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACM,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACU,YAAY,CAAEC,eAAe,CAAC,CAAGX,QAAQ,CAACE,MAAM,CAAC,CAAC,CAACU,MAAM,CAAC,SAAS,CAAC,CAAC,CAE5E,KAAM,CAAAC,UAAU,CAAG,KAAAA,CAAOC,IAAI,CAAEC,KAAK,GAAK,CACxCN,UAAU,CAAC,IAAI,CAAC,CAChBF,QAAQ,CAAC,IAAI,CAAC,CACd,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,qCAAqCH,IAAI,UAAUC,KAAK,EAAE,CAAC,CACxF,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAE1D;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CACpChB,QAAQ,CAACe,MAAM,CAACE,eAAe,EAAI,EAAE,CAAC,CACxC,CAAE,MAAOC,GAAG,CAAE,CACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,CAAC,CACvB,CAAC,OAAS,CACRf,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAgB,mBAAmB,CAAG,KAAAA,CAAOX,IAAI,CAAEC,KAAK,GAAK,CACjD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,+CAA+C,CAAE,CAC5ES,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEhB,IAAI,CAAEC,KAAM,CAAC,CACtC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1D;AACF,CAAE,MAAOI,GAAG,CAAE,CACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,CAAC,CACvB,CACF,CAAC,CAEDvB,SAAS,CAAC,IAAM,CACd,KAAM,CAACa,IAAI,CAAEC,KAAK,CAAC,CAAGL,YAAY,CAACqB,KAAK,CAAC,GAAG,CAAC,CAC7ClB,UAAU,CAACC,IAAI,CAAEC,KAAK,CAAC,CACzB,CAAC,CAAE,CAACL,YAAY,CAAC,CAAC,CAElB,MAAO,CAAEN,KAAK,CAAEI,OAAO,CAAEF,KAAK,CAAEI,YAAY,CAAEC,eAAe,CAAEc,mBAAoB,CAAC,CACtF,CAAC,CAED,cAAe,CAAAtB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}