{"ast":null,"code":"import{useState}from\"react\";import moment from\"moment\";const useGlobalTaskUpdate=()=>{const[data,setData]=useState(null);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const[currentMonth,setCurrentMonth]=useState(moment().format(\"YYYY-MM\"));const updateTask=async updatedTask=>{setLoading(true);setError(null);try{const response=await fetch('http://localhost:3001/global-tasks/update',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(updatedTask)});if(!response.ok){throw new Error('Failed to update task');}const result=await response.json();setData(result);return result;}catch(err){setError(err.message);throw err;}finally{setLoading(false);}};const updateStatus=async updatedTask=>{setLoading(true);setError(null);try{const response=await fetch('http://localhost:3001/global-tasks/change-status',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(updatedTask)});if(!response.ok){throw new Error('Failed to update task status');}const result=await response.json();setData(result);return result;}catch(err){setError(err.message);throw err;}finally{setLoading(false);}};return{updateTask,updateStatus,data,error,loading};};export default useGlobalTaskUpdate;","map":{"version":3,"names":["useState","moment","useGlobalTaskUpdate","data","setData","error","setError","loading","setLoading","currentMonth","setCurrentMonth","format","updateTask","updatedTask","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","err","message","updateStatus"],"sources":["D:/coso codoso/Scheduler 3000/arodbol97.github.io/scheduler/src/components/useGlobalTaskUpdate.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst useGlobalTaskUpdate = () => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\r\n\r\n  const updateTask = async (updatedTask) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/global-tasks/update', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update task');\r\n      }      \r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      return result; \r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err; \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateStatus = async (updatedTask) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/global-tasks/change-status', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update task status');\r\n      }      \r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      return result; \r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err; \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { updateTask, updateStatus, data, error, loading };\r\n};\r\n\r\nexport default useGlobalTaskUpdate;"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,MAAM,KAAM,QAAQ,CAE3B,KAAM,CAAAC,mBAAmB,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGJ,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACK,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACS,YAAY,CAAEC,eAAe,CAAC,CAAGV,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACU,MAAM,CAAC,SAAS,CAAC,CAAC,CAE5E,KAAM,CAAAC,UAAU,CAAG,KAAO,CAAAC,WAAW,EAAK,CACxCL,UAAU,CAAC,IAAI,CAAC,CAChBF,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,2CAA2C,CAAE,CACxEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAClC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACpCpB,OAAO,CAACmB,MAAM,CAAC,CACf,MAAO,CAAAA,MAAM,CACf,CAAE,MAAOE,GAAG,CAAE,CACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAAC,CACrB,KAAM,CAAAD,GAAG,CACX,CAAC,OAAS,CACRjB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAmB,YAAY,CAAG,KAAO,CAAAd,WAAW,EAAK,CAC1CL,UAAU,CAAC,IAAI,CAAC,CAChBF,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kDAAkD,CAAE,CAC/EC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAClC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACpCpB,OAAO,CAACmB,MAAM,CAAC,CACf,MAAO,CAAAA,MAAM,CACf,CAAE,MAAOE,GAAG,CAAE,CACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAAC,CACrB,KAAM,CAAAD,GAAG,CACX,CAAC,OAAS,CACRjB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,MAAO,CAAEI,UAAU,CAAEe,YAAY,CAAExB,IAAI,CAAEE,KAAK,CAAEE,OAAQ,CAAC,CAC3D,CAAC,CAED,cAAe,CAAAL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}