{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport moment from \"moment\";\nconst useGlobalTaskNew = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\n  const addTask = async newTask => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:3001/global-tasks/new', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create a new task');\n      }\n      const [year, month] = currentMonth.split(\"-\");\n      checkAndCreateTasks(year, month);\n      const result = await response.json();\n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const checkAndCreateTasks = async (year, month) => {\n    try {\n      const response = await fetch(`http://localhost:3001/months/checkGlobalTasks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          year,\n          month\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to check tasks\");\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  return {\n    addTask,\n    data,\n    error,\n    loading\n  };\n};\n_s(useGlobalTaskNew, \"IlRGvt1AZdcOSbnP5/Y1l30GPdE=\");\nexport default useGlobalTaskNew;","map":{"version":3,"names":["useState","moment","useGlobalTaskNew","_s","data","setData","error","setError","loading","setLoading","currentMonth","setCurrentMonth","format","addTask","newTask","response","fetch","method","headers","body","JSON","stringify","ok","Error","year","month","split","checkAndCreateTasks","result","json","err","message"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/useGlobalTaskNew.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst useGlobalTaskNew = () => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\r\n\r\n  const addTask = async (newTask) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/global-tasks/new', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create a new task');\r\n      }\r\n\r\n      const [year, month] = currentMonth.split(\"-\");\r\n      checkAndCreateTasks(year, month);\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      return result; \r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err; \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkAndCreateTasks = async (year, month) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/months/checkGlobalTasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ year, month }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to check tasks\");      \r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  return { addTask, data, error, loading };\r\n};\r\n\r\nexport default useGlobalTaskNew;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACW,MAAM,CAAC,SAAS,CAAC,CAAC;EAE5E,MAAMC,OAAO,GAAG,MAAOC,OAAO,IAAK;IACjCL,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGf,YAAY,CAACgB,KAAK,CAAC,GAAG,CAAC;MAC7CC,mBAAmB,CAACH,IAAI,EAAEC,KAAK,CAAC;MAEhC,MAAMG,MAAM,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACpCxB,OAAO,CAACuB,MAAM,CAAC;MACf,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZvB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX,CAAC,SAAS;MACRrB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkB,mBAAmB,GAAG,MAAAA,CAAOH,IAAI,EAAEC,KAAK,KAAK;IACjD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEG,IAAI;UAAEC;QAAM,CAAC;MACtC,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5D,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZvB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAAC;IACvB;EACF,CAAC;EAED,OAAO;IAAElB,OAAO;IAAET,IAAI;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AAC1C,CAAC;AAACL,EAAA,CApDID,gBAAgB;AAsDtB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}