{"ast":null,"code":"var _jsxFileName = \"D:\\\\coso codoso\\\\Scheduler 3000\\\\scheduler-3000-frontend\\\\src\\\\components\\\\dayCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tooltip } from \"react-tooltip\";\nimport \"react-tooltip/dist/react-tooltip.css\";\nimport useGlobalTaskUpdate from './useGlobalTaskUpdate';\nimport Month from './month';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DayCard = ({\n  date,\n  data,\n  handleComponentChange,\n  tasks\n}) => {\n  _s();\n  var _data$tasks;\n  const divStyles = {\n    backgroundColor: 'white',\n    border: '2px solid black',\n    width: 'calc(14.28571428% - 4px)',\n    aspectRatio: '1 / 0.5',\n    margin: '0px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  const tasksDivStyles = {\n    backgroundColor: 'lightgrey',\n    width: '100%',\n    height: '10%',\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginTop: 'auto'\n  };\n  const taskDivStyles = {\n    width: '20px',\n    height: '100%',\n    marginLeft: '2px',\n    cursor: 'pointer'\n  };\n  const {\n    updateStatus,\n    loading\n  } = useGlobalTaskUpdate();\n  const formattedDate = date ? date.toLocaleDateString('es-ES', {\n    weekday: 'long',\n    day: 'numeric'\n  }).replace(/^\\w/, char => char.toUpperCase()).replace(/(?:^|\\s)\\w/g, char => char.toUpperCase()) : 'No date provided';\n  const currentDateOnly = new Date(date);\n  currentDateOnly.setHours(0, 0, 0, 0);\n  const normalizeTaskDate = taskDate => {\n    const mysqlDate = new Date(taskDate);\n    mysqlDate.setHours(0, 0, 0, 0);\n    return mysqlDate;\n  };\n  const dayTasks = data === null || data === void 0 ? void 0 : (_data$tasks = data.tasks) === null || _data$tasks === void 0 ? void 0 : _data$tasks.filter(task => {\n    const taskDateNormalized = normalizeTaskDate(task.globalTaskDate);\n    return currentDateOnly.getTime() === taskDateNormalized.getTime();\n  });\n  const handleDayClick = () => {};\n  const handleTaskClick = async (id, dateId, status) => {\n    switch (status) {\n      case 'pending':\n        status = 'done';\n        break;\n      case 'done':\n        status = 'failed';\n        break;\n      case 'failed':\n        status = 'justified';\n        break;\n      case 'justified':\n        status = 'pending';\n        break;\n      default:\n        console.log(\"Invalid status\");\n        break;\n    }\n    await updateStatus({\n      globalTaskId: id,\n      globalTaskDateId: dateId,\n      globalTaskStatus: status\n    });\n    handleComponentChange( /*#__PURE__*/_jsxDEV(Month, {\n      changed: `${dateId}-${status}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 27\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: divStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: formattedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: tasksDivStyles,\n      children: dayTasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...taskDivStyles,\n          backgroundColor: task.globalTaskStatus === 'pending' ? 'grey' : task.globalTaskStatus === 'done' ? 'green' : task.globalTaskStatus === 'failed' ? 'red' : task.globalTaskStatus === 'justified' ? 'yellow' : 'grey'\n        },\n        \"data-tooltip-id\": `task-tooltip-${task.globalTaskId}`,\n        \"data-tooltip-content\": task.globalTaskName,\n        onClick: () => handleTaskClick(task.globalTaskId, task.globalTaskDateId, task.globalTaskStatus),\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: `task-tooltip-${task.globalTaskId}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, task.globalTaskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(DayCard, \"MDS99n1rULu06T3gHlhcef5r2i0=\", false, function () {\n  return [useGlobalTaskUpdate];\n});\n_c = DayCard;\nexport default DayCard;\nvar _c;\n$RefreshReg$(_c, \"DayCard\");","map":{"version":3,"names":["React","useState","Tooltip","useGlobalTaskUpdate","Month","jsxDEV","_jsxDEV","DayCard","date","data","handleComponentChange","tasks","_s","_data$tasks","divStyles","backgroundColor","border","width","aspectRatio","margin","display","flexDirection","alignItems","justifyContent","tasksDivStyles","height","marginTop","taskDivStyles","marginLeft","cursor","updateStatus","loading","formattedDate","toLocaleDateString","weekday","day","replace","char","toUpperCase","currentDateOnly","Date","setHours","normalizeTaskDate","taskDate","mysqlDate","dayTasks","filter","task","taskDateNormalized","globalTaskDate","getTime","handleDayClick","handleTaskClick","id","dateId","status","console","log","globalTaskId","globalTaskDateId","globalTaskStatus","changed","fileName","_jsxFileName","lineNumber","columnNumber","style","children","map","globalTaskName","onClick","_c","$RefreshReg$"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/dayCard.jsx"],"sourcesContent":["import React, { useState } from 'react'; \r\nimport { Tooltip } from \"react-tooltip\";\r\nimport \"react-tooltip/dist/react-tooltip.css\";\r\nimport useGlobalTaskUpdate from './useGlobalTaskUpdate';\r\nimport Month from './month';\r\n\r\nconst DayCard = ({ date, data, handleComponentChange, tasks }) => {      \r\n\r\n  const divStyles = {\r\n      backgroundColor: 'white',\r\n      border: '2px solid black',\r\n      width: 'calc(14.28571428% - 4px)',\r\n      aspectRatio: '1 / 0.5',\r\n      margin: '0px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',      \r\n  };\r\n\r\n  const tasksDivStyles = {\r\n    backgroundColor: 'lightgrey',\r\n    width: '100%',\r\n    height: '10%',\r\n    display: 'flex',    \r\n    justifyContent: 'flex-end',\r\n    marginTop: 'auto'\r\n  };\r\n\r\n  const taskDivStyles = {    \r\n    width: '20px',\r\n    height: '100%',\r\n    marginLeft: '2px',    \r\n    cursor: 'pointer'\r\n  };\r\n\r\n  const {updateStatus, loading} = useGlobalTaskUpdate();\r\n\r\n  const formattedDate = date\r\n    ? date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric' })\r\n      .replace(/^\\w/, (char) => char.toUpperCase())\r\n      .replace(/(?:^|\\s)\\w/g, (char) => char.toUpperCase())\r\n    : 'No date provided';\r\n  \r\n  const currentDateOnly = new Date(date);\r\n  currentDateOnly.setHours(0, 0, 0, 0); \r\n  \r\n  const normalizeTaskDate = (taskDate) => {\r\n    const mysqlDate = new Date(taskDate); \r\n    mysqlDate.setHours(0, 0, 0, 0); \r\n    return mysqlDate;\r\n  };\r\n  \r\n  const dayTasks = data?.tasks?.filter(task => {\r\n    const taskDateNormalized = normalizeTaskDate(task.globalTaskDate);    \r\n    return currentDateOnly.getTime() === taskDateNormalized.getTime();\r\n  });\r\n\r\n  const handleDayClick = () => {\r\n\r\n  };\r\n\r\n  const handleTaskClick = async (id, dateId, status) => {    \r\n    switch (status) {\r\n      case 'pending':\r\n        status = 'done';\r\n        break;\r\n      case 'done':\r\n        status = 'failed';\r\n        break;\r\n      case 'failed':\r\n        status = 'justified';\r\n        break;\r\n      case 'justified':\r\n        status = 'pending';\r\n        break;    \r\n      default:\r\n        console.log(\"Invalid status\");\r\n        break;\r\n    }\r\n    await updateStatus({globalTaskId: id, globalTaskDateId: dateId, globalTaskStatus: status});\r\n    handleComponentChange(<Month changed={`${dateId}-${status}`}/>);\r\n  };\r\n\r\n  return (\r\n    <div style={divStyles}>\r\n\r\n      <h3>{formattedDate}</h3>      \r\n\r\n      <div style={tasksDivStyles}>\r\n        {dayTasks.map((task) => (\r\n          <div \r\n            key={task.globalTaskId} \r\n            style={{\r\n              ...taskDivStyles, \r\n              backgroundColor: task.globalTaskStatus === 'pending' \r\n                ? 'grey' \r\n                : task.globalTaskStatus === 'done' \r\n                ? 'green' \r\n                : task.globalTaskStatus === 'failed' \r\n                ? 'red' \r\n                : task.globalTaskStatus === 'justified' \r\n                ? 'yellow' \r\n                : 'grey'\r\n            }} \r\n            data-tooltip-id={`task-tooltip-${task.globalTaskId}`}\r\n            data-tooltip-content={task.globalTaskName}\r\n            onClick={() => handleTaskClick(task.globalTaskId, task.globalTaskDateId, task.globalTaskStatus)}>\r\n            \r\n            <Tooltip id={`task-tooltip-${task.globalTaskId}`}/>\r\n          </div>\r\n        ))}\r\n      </div>      \r\n\r\n    </div>    \r\n  );\r\n};\r\n\r\nexport default DayCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}