{"ast":null,"code":"var _jsxFileName = \"D:\\\\coso codoso\\\\Scheduler 3000\\\\scheduler-3000-frontend\\\\src\\\\components\\\\dayCard.jsx\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DayCard = ({\n  date,\n  data\n}) => {\n  var _data$tasks;\n  const divStyles = {\n    backgroundColor: 'white',\n    border: '2px solid black',\n    width: 'calc(14.28% - 4px)',\n    aspectRatio: '1 / 1',\n    margin: '0px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  const formattedDate = date ? date.toLocaleDateString('es-ES', {\n    weekday: 'long',\n    day: 'numeric'\n  }) : 'No date provided';\n  const currentDateOnly = new Date(date);\n  currentDateOnly.setHours(0, 0, 0, 0);\n  const normalizeTaskDate = taskDate => {\n    const mysqlDate = new Date(taskDate);\n    mysqlDate.setHours(0, 0, 0, 0);\n    return mysqlDate;\n  };\n  const dayTasks = data === null || data === void 0 ? void 0 : (_data$tasks = data.tasks) === null || _data$tasks === void 0 ? void 0 : _data$tasks.filter(task => {\n    const taskDateNormalized = normalizeTaskDate(task.globalTaskDate);\n    console.log(normalizeTaskDate(task.globalTaskDate));\n    return currentDateOnly.getTime() === taskDateNormalized.getTime();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: divStyles,\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: formattedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = DayCard;\nexport default DayCard;\nvar _c;\n$RefreshReg$(_c, \"DayCard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DayCard","date","data","_data$tasks","divStyles","backgroundColor","border","width","aspectRatio","margin","display","flexDirection","alignItems","justifyContent","formattedDate","toLocaleDateString","weekday","day","currentDateOnly","Date","setHours","normalizeTaskDate","taskDate","mysqlDate","dayTasks","tasks","filter","task","taskDateNormalized","globalTaskDate","console","log","getTime","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/dayCard.jsx"],"sourcesContent":["import React, { useState } from 'react'; \r\n\r\nconst DayCard = ({ date, data }) => {      \r\n\r\n  const divStyles = {\r\n      backgroundColor: 'white',\r\n      border: '2px solid black',\r\n      width: 'calc(14.28% - 4px)',\r\n      aspectRatio: '1 / 1',\r\n      margin: '0px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',      \r\n  };\r\n\r\n  const formattedDate = date\r\n    ? date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric' })        \r\n    : 'No date provided';\r\n  \r\n  const currentDateOnly = new Date(date);\r\n  currentDateOnly.setHours(0, 0, 0, 0); \r\n  \r\n  const normalizeTaskDate = (taskDate) => {\r\n    const mysqlDate = new Date(taskDate); \r\n    mysqlDate.setHours(0, 0, 0, 0); \r\n    return mysqlDate;\r\n  };\r\n  \r\n  const dayTasks = data?.tasks?.filter(task => {\r\n    const taskDateNormalized = normalizeTaskDate(task.globalTaskDate);\r\n    console.log(normalizeTaskDate(task.globalTaskDate));\r\n    return currentDateOnly.getTime() === taskDateNormalized.getTime();\r\n  });\r\n\r\n  return (\r\n    <div style={divStyles}>\r\n      <h3>{formattedDate}</h3>\r\n    </div>    \r\n  );\r\n};\r\n\r\nexport default DayCard;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,OAAO,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAK,CAAC,KAAK;EAAA,IAAAC,WAAA;EAElC,MAAMC,SAAS,GAAG;IACdC,eAAe,EAAE,OAAO;IACxBC,MAAM,EAAE,iBAAiB;IACzBC,KAAK,EAAE,oBAAoB;IAC3BC,WAAW,EAAE,OAAO;IACpBC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EACpB,CAAC;EAED,MAAMC,aAAa,GAAGb,IAAI,GACtBA,IAAI,CAACc,kBAAkB,CAAC,OAAO,EAAE;IAAEC,OAAO,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAU,CAAC,CAAC,GACrE,kBAAkB;EAEtB,MAAMC,eAAe,GAAG,IAAIC,IAAI,CAAClB,IAAI,CAAC;EACtCiB,eAAe,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEpC,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;IACtC,MAAMC,SAAS,GAAG,IAAIJ,IAAI,CAACG,QAAQ,CAAC;IACpCC,SAAS,CAACH,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9B,OAAOG,SAAS;EAClB,CAAC;EAED,MAAMC,QAAQ,GAAGtB,IAAI,aAAJA,IAAI,wBAAAC,WAAA,GAAJD,IAAI,CAAEuB,KAAK,cAAAtB,WAAA,uBAAXA,WAAA,CAAauB,MAAM,CAACC,IAAI,IAAI;IAC3C,MAAMC,kBAAkB,GAAGP,iBAAiB,CAACM,IAAI,CAACE,cAAc,CAAC;IACjEC,OAAO,CAACC,GAAG,CAACV,iBAAiB,CAACM,IAAI,CAACE,cAAc,CAAC,CAAC;IACnD,OAAOX,eAAe,CAACc,OAAO,CAAC,CAAC,KAAKJ,kBAAkB,CAACI,OAAO,CAAC,CAAC;EACnE,CAAC,CAAC;EAEF,oBACEjC,OAAA;IAAKkC,KAAK,EAAE7B,SAAU;IAAA8B,QAAA,eACpBnC,OAAA;MAAAmC,QAAA,EAAKpB;IAAa;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACC,EAAA,GAtCIvC,OAAO;AAwCb,eAAeA,OAAO;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}