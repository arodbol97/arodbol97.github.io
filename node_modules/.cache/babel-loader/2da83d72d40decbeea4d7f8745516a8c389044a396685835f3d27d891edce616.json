{"ast":null,"code":"import{useState}from\"react\";import moment from\"moment\";const useGlobalTaskNew=()=>{const[data,setData]=useState(null);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const[currentMonth,setCurrentMonth]=useState(moment().format(\"YYYY-MM\"));const addTask=async newTask=>{setLoading(true);setError(null);try{const response=await fetch('http://localhost:3001/global-tasks/new',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newTask)});if(!response.ok){throw new Error('Failed to create a new task');}const[year,month]=currentMonth.split(\"-\");await checkAndCreateTasks(year,month);const result=await response.json();setData(result);return result;}catch(err){setError(err.message);throw err;}finally{setLoading(false);}};const checkAndCreateTasks=async(year,month)=>{try{const response=await fetch(`http://localhost:3001/months/checkGlobalTasks`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({year,month})});if(!response.ok)throw new Error(\"Failed to check tasks\");}catch(err){setError(err.message);}};return{addTask,data,error,loading};};export default useGlobalTaskNew;","map":{"version":3,"names":["useState","moment","useGlobalTaskNew","data","setData","error","setError","loading","setLoading","currentMonth","setCurrentMonth","format","addTask","newTask","response","fetch","method","headers","body","JSON","stringify","ok","Error","year","month","split","checkAndCreateTasks","result","json","err","message"],"sources":["D:/coso codoso/Scheduler 3000/arodbol97.github.io/src/components/useGlobalTaskNew.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst useGlobalTaskNew = () => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\r\n\r\n  const addTask = async (newTask) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3001/global-tasks/new', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create a new task');\r\n      }\r\n\r\n      const [year, month] = currentMonth.split(\"-\");\r\n      await checkAndCreateTasks(year, month);\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      return result; \r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err; \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkAndCreateTasks = async (year, month) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/months/checkGlobalTasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ year, month }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to check tasks\");      \r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  return { addTask, data, error, loading };\r\n};\r\n\r\nexport default useGlobalTaskNew;"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,MAAM,KAAM,QAAQ,CAE3B,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGJ,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACK,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACS,YAAY,CAAEC,eAAe,CAAC,CAAGV,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACU,MAAM,CAAC,SAAS,CAAC,CAAC,CAE5E,KAAM,CAAAC,OAAO,CAAG,KAAO,CAAAC,OAAO,EAAK,CACjCL,UAAU,CAAC,IAAI,CAAC,CAChBF,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,wCAAwC,CAAE,CACrEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,OAAO,CAC9B,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,KAAM,CAACC,IAAI,CAAEC,KAAK,CAAC,CAAGf,YAAY,CAACgB,KAAK,CAAC,GAAG,CAAC,CAC7C,KAAM,CAAAC,mBAAmB,CAACH,IAAI,CAAEC,KAAK,CAAC,CAEtC,KAAM,CAAAG,MAAM,CAAG,KAAM,CAAAb,QAAQ,CAACc,IAAI,CAAC,CAAC,CACpCxB,OAAO,CAACuB,MAAM,CAAC,CACf,MAAO,CAAAA,MAAM,CACf,CAAE,MAAOE,GAAG,CAAE,CACZvB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAAC,CACrB,KAAM,CAAAD,GAAG,CACX,CAAC,OAAS,CACRrB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAkB,mBAAmB,CAAG,KAAAA,CAAOH,IAAI,CAAEC,KAAK,GAAK,CACjD,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,+CAA+C,CAAE,CAC5EC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEG,IAAI,CAAEC,KAAM,CAAC,CACtC,CAAC,CAAC,CAEF,GAAI,CAACV,QAAQ,CAACO,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC5D,CAAE,MAAOO,GAAG,CAAE,CACZvB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAAC,CACvB,CACF,CAAC,CAED,MAAO,CAAElB,OAAO,CAAET,IAAI,CAAEE,KAAK,CAAEE,OAAQ,CAAC,CAC1C,CAAC,CAED,cAAe,CAAAL,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}