{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nconst useCheckMonth = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\n  const fetchTasks = async (year, month) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`http://localhost:3001/months?year=${year}&month=${month}`);\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\");\n      await checkAndCreateTasks(year, month);\n      const result = await response.json();\n      setTasks(result.globalTaskDates || []);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const checkAndCreateTasks = async (year, month) => {\n    try {\n      const response = await fetch(`http://localhost:3001/months/checkGlobalTasks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          year,\n          month\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to check tasks\");\n      await fetchTasks(year, month);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  useEffect(() => {\n    const [year, month] = currentMonth.split(\"-\");\n    fetchTasks(year, month);\n  }, [currentMonth]);\n  return {\n    tasks,\n    loading,\n    error,\n    currentMonth,\n    setCurrentMonth,\n    checkAndCreateTasks\n  };\n};\n_s(useCheckMonth, \"h8TMvR0w2DeLaOF4XvhlZx9OKcE=\");\nexport default useCheckMonth;","map":{"version":3,"names":["useState","useEffect","moment","useCheckMonth","_s","tasks","setTasks","error","setError","loading","setLoading","currentMonth","setCurrentMonth","format","fetchTasks","year","month","response","fetch","ok","Error","checkAndCreateTasks","result","json","globalTaskDates","err","message","method","headers","body","JSON","stringify","split"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/useCheckMonth.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst useCheckMonth = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(moment().format(\"YYYY-MM\"));\r\n\r\n  const fetchTasks = async (year, month) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {      \r\n      const response = await fetch(`http://localhost:3001/months?year=${year}&month=${month}`);\r\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\");\r\n\r\n      await checkAndCreateTasks(year, month);\r\n      const result = await response.json();\r\n      setTasks(result.globalTaskDates || []);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkAndCreateTasks = async (year, month) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/months/checkGlobalTasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ year, month }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to check tasks\");\r\n      await fetchTasks(year, month);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const [year, month] = currentMonth.split(\"-\");    \r\n    fetchTasks(year, month);    \r\n  }, [currentMonth]);\r\n\r\n  return { tasks, loading, error, currentMonth, setCurrentMonth, checkAndCreateTasks };\r\n};\r\n\r\nexport default useCheckMonth;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAACE,MAAM,CAAC,CAAC,CAACW,MAAM,CAAC,SAAS,CAAC,CAAC;EAE5E,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;IACxCN,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqCH,IAAI,UAAUC,KAAK,EAAE,CAAC;MACxF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAE1D,MAAMC,mBAAmB,CAACN,IAAI,EAAEC,KAAK,CAAC;MACtC,MAAMM,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpCjB,QAAQ,CAACgB,MAAM,CAACE,eAAe,IAAI,EAAE,CAAC;IACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZjB,QAAQ,CAACiB,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMW,mBAAmB,GAAG,MAAAA,CAAON,IAAI,EAAEC,KAAK,KAAK;IACjD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5ES,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEhB,IAAI;UAAEC;QAAM,CAAC;MACtC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1D,MAAMN,UAAU,CAACC,IAAI,EAAEC,KAAK,CAAC;IAC/B,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZjB,QAAQ,CAACiB,GAAG,CAACC,OAAO,CAAC;IACvB;EACF,CAAC;EAEDzB,SAAS,CAAC,MAAM;IACd,MAAM,CAACc,IAAI,EAAEC,KAAK,CAAC,GAAGL,YAAY,CAACqB,KAAK,CAAC,GAAG,CAAC;IAC7ClB,UAAU,CAACC,IAAI,EAAEC,KAAK,CAAC;EACzB,CAAC,EAAE,CAACL,YAAY,CAAC,CAAC;EAElB,OAAO;IAAEN,KAAK;IAAEI,OAAO;IAAEF,KAAK;IAAEI,YAAY;IAAEC,eAAe;IAAES;EAAoB,CAAC;AACtF,CAAC;AAACjB,EAAA,CA5CID,aAAa;AA8CnB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}