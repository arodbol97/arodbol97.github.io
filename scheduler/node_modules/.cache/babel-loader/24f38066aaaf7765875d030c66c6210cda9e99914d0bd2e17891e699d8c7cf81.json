{"ast":null,"code":"var _jsxFileName = \"D:\\\\coso codoso\\\\Scheduler 3000\\\\scheduler-3000-frontend\\\\src\\\\components\\\\dayCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Tooltip } from \"react-tooltip\";\nimport \"react-tooltip/dist/react-tooltip.css\";\nimport useGlobalTaskUpdate from './useGlobalTaskUpdate';\nimport Month from './month';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DayCard = ({\n  date,\n  data\n}) => {\n  _s();\n  const [dayTasks, setDayTasks] = useState([]);\n  const divStyles = {\n    backgroundColor: 'white',\n    border: '2px solid black',\n    width: 'calc(14.28571428% - 4px)',\n    aspectRatio: '1 / 0.5',\n    margin: '0px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  const tasksDivStyles = {\n    backgroundColor: 'lightgrey',\n    width: '100%',\n    height: '13%',\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginTop: 'auto'\n  };\n  const taskDivStyles = {\n    width: '20px',\n    height: '100%',\n    marginLeft: '2px',\n    cursor: 'pointer'\n  };\n  const {\n    updateStatus,\n    loading\n  } = useGlobalTaskUpdate();\n  const formattedDate = date ? date.toLocaleDateString('es-ES', {\n    weekday: 'long',\n    day: 'numeric'\n  }).replace(/^\\w/, char => char.toUpperCase()).replace(/(?:^|\\s)\\w/g, char => char.toUpperCase()) : 'No date provided';\n  const handleDayClick = () => {};\n  const handleTaskClick = async (id, dateId, status) => {\n    switch (status) {\n      case 'pending':\n        status = 'done';\n        break;\n      case 'done':\n        status = 'failed';\n        break;\n      case 'failed':\n        status = 'justified';\n        break;\n      case 'justified':\n        status = 'pending';\n        break;\n      default:\n        console.log(\"Invalid status\");\n        break;\n    }\n    await updateStatus({\n      globalTaskId: id,\n      globalTaskDateId: dateId,\n      globalTaskStatus: status\n    });\n    setDayTasks(prevTasks => prevTasks.map(task => task.globalTaskId === id ? {\n      ...task,\n      globalTaskStatus: status\n    } : task));\n  };\n  useEffect(() => {\n    if (data !== null && data !== void 0 && data.tasks && date) {\n      const filteredTasks = data.tasks.filter(task => {\n        const taskDateNormalized = new Date(task.globalTaskDate);\n        taskDateNormalized.setHours(0, 0, 0, 0);\n        const currentDateNormalized = new Date(date);\n        currentDateNormalized.setHours(0, 0, 0, 0);\n        return currentDateNormalized.getTime() === taskDateNormalized.getTime();\n      });\n      setDayTasks(filteredTasks);\n    }\n  }, [data, date]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: divStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: formattedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: tasksDivStyles,\n      children: dayTasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...taskDivStyles,\n          backgroundColor: task.globalTaskStatus === 'pending' ? 'grey' : task.globalTaskStatus === 'done' ? 'green' : task.globalTaskStatus === 'failed' ? 'red' : task.globalTaskStatus === 'justified' ? 'orange' : 'grey'\n        },\n        \"data-tooltip-id\": `task-tooltip-${task.globalTaskId}`,\n        \"data-tooltip-content\": task.globalTaskName,\n        onClick: () => handleTaskClick(task.globalTaskId, task.globalTaskDateId, task.globalTaskStatus),\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: `task-tooltip-${task.globalTaskId}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, task.globalTaskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(DayCard, \"7fS1rtox+K5kYx67RukJ5CCvmWw=\", false, function () {\n  return [useGlobalTaskUpdate];\n});\n_c = DayCard;\nexport default DayCard;\nvar _c;\n$RefreshReg$(_c, \"DayCard\");","map":{"version":3,"names":["React","useState","useEffect","Tooltip","useGlobalTaskUpdate","Month","jsxDEV","_jsxDEV","DayCard","date","data","_s","dayTasks","setDayTasks","divStyles","backgroundColor","border","width","aspectRatio","margin","display","flexDirection","alignItems","justifyContent","tasksDivStyles","height","marginTop","taskDivStyles","marginLeft","cursor","updateStatus","loading","formattedDate","toLocaleDateString","weekday","day","replace","char","toUpperCase","handleDayClick","handleTaskClick","id","dateId","status","console","log","globalTaskId","globalTaskDateId","globalTaskStatus","prevTasks","map","task","tasks","filteredTasks","filter","taskDateNormalized","Date","globalTaskDate","setHours","currentDateNormalized","getTime","style","children","fileName","_jsxFileName","lineNumber","columnNumber","globalTaskName","onClick","_c","$RefreshReg$"],"sources":["D:/coso codoso/Scheduler 3000/scheduler-3000-frontend/src/components/dayCard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \r\nimport { Tooltip } from \"react-tooltip\";\r\nimport \"react-tooltip/dist/react-tooltip.css\";\r\nimport useGlobalTaskUpdate from './useGlobalTaskUpdate';\r\nimport Month from './month';\r\n\r\nconst DayCard = ({ date, data }) => {      \r\n\r\n  const [dayTasks, setDayTasks] = useState([]);\r\n\r\n  const divStyles = {\r\n      backgroundColor: 'white',\r\n      border: '2px solid black',\r\n      width: 'calc(14.28571428% - 4px)',\r\n      aspectRatio: '1 / 0.5',\r\n      margin: '0px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',      \r\n  };\r\n\r\n  const tasksDivStyles = {\r\n    backgroundColor: 'lightgrey',\r\n    width: '100%',\r\n    height: '13%',\r\n    display: 'flex',    \r\n    justifyContent: 'flex-end',\r\n    marginTop: 'auto'\r\n  };\r\n\r\n  const taskDivStyles = {    \r\n    width: '20px',\r\n    height: '100%',\r\n    marginLeft: '2px',    \r\n    cursor: 'pointer'\r\n  };\r\n\r\n  const {updateStatus, loading} = useGlobalTaskUpdate();\r\n\r\n  const formattedDate = date\r\n    ? date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric' })\r\n      .replace(/^\\w/, (char) => char.toUpperCase())\r\n      .replace(/(?:^|\\s)\\w/g, (char) => char.toUpperCase())\r\n    : 'No date provided';\r\n    \r\n\r\n  const handleDayClick = () => {\r\n\r\n  };\r\n\r\n  const handleTaskClick = async (id, dateId, status) => {    \r\n    switch (status) {\r\n      case 'pending':\r\n        status = 'done';\r\n        break;\r\n      case 'done':\r\n        status = 'failed';\r\n        break;\r\n      case 'failed':\r\n        status = 'justified';\r\n        break;\r\n      case 'justified':\r\n        status = 'pending';\r\n        break;    \r\n      default:\r\n        console.log(\"Invalid status\");\r\n        break;\r\n    }\r\n    await updateStatus({globalTaskId: id, globalTaskDateId: dateId, globalTaskStatus: status});\r\n    \r\n    setDayTasks(prevTasks =>\r\n      prevTasks.map(task =>\r\n        task.globalTaskId === id\r\n          ? { ...task, globalTaskStatus: status }\r\n          : task\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {   \r\n    if (data?.tasks && date) {\r\n      const filteredTasks = data.tasks.filter(task => {\r\n        const taskDateNormalized = new Date(task.globalTaskDate);\r\n        taskDateNormalized.setHours(0, 0, 0, 0);\r\n  \r\n        const currentDateNormalized = new Date(date);\r\n        currentDateNormalized.setHours(0, 0, 0, 0);\r\n  \r\n        return currentDateNormalized.getTime() === taskDateNormalized.getTime();\r\n      });\r\n      setDayTasks(filteredTasks);\r\n    }\r\n    }, [data, date]);\r\n\r\n  return (\r\n    <div style={divStyles}>\r\n\r\n      <h3>{formattedDate}</h3>      \r\n\r\n      <div style={tasksDivStyles}>\r\n        {dayTasks.map((task) => (\r\n          <div \r\n            key={task.globalTaskId} \r\n            style={{\r\n              ...taskDivStyles, \r\n              backgroundColor: task.globalTaskStatus === 'pending' \r\n                ? 'grey' \r\n                : task.globalTaskStatus === 'done' \r\n                ? 'green' \r\n                : task.globalTaskStatus === 'failed' \r\n                ? 'red' \r\n                : task.globalTaskStatus === 'justified' \r\n                ? 'orange' \r\n                : 'grey'\r\n            }} \r\n            data-tooltip-id={`task-tooltip-${task.globalTaskId}`}\r\n            data-tooltip-content={task.globalTaskName}\r\n            onClick={() => handleTaskClick(task.globalTaskId, task.globalTaskDateId, task.globalTaskStatus)}>\r\n            \r\n            <Tooltip id={`task-tooltip-${task.globalTaskId}`}/>\r\n          </div>\r\n        ))}\r\n      </div>      \r\n\r\n    </div>    \r\n  );\r\n};\r\n\r\nexport default DayCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}